{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit'; // import { API_URL } from 'reusable/urls';\n\nexport const allProjects = createSlice({\n  name: 'allProjects',\n  initialState: {\n    projectList: [],\n    projectUploadSuccess: false\n  },\n  reducers: {\n    addProject: (store, action) => {\n      store.projectList = [...store.projectList, action.payload];\n    },\n    setProjectList: (store, action) => {\n      store.projectList = action.payload;\n    },\n    setProjectUploadSuccess: (store, action) => {\n      store.projectUploadSuccess = action.payload;\n    }\n  }\n});\nexport const fetchProjects = (filters = {}) => {\n  const {\n    stack,\n    bootcamp,\n    week\n  } = filters;\n  const queryParams = {};\n\n  if (stack) {\n    queryParams.stack = stack;\n  }\n\n  if (bootcamp) {\n    queryParams.bootcamp = bootcamp;\n  }\n\n  if (week) {\n    queryParams.week = week;\n  }\n\n  return dispatch => {\n    fetch('http://localhost:8080/projects?' + new URLSearchParams(queryParams)).then(res => res.json()).then(projectList => {\n      dispatch(allProjects.actions.setProjectList(projectList));\n    });\n  };\n};\nexport const uploadProject = formData => {\n  return (dispatch, getState) => {\n    fetch('http://localhost:8080/upload', {\n      method: 'POST',\n      body: formData\n    }).then(res => res.json()).then(project => {\n      dispatch(allProjects.actions.addProject(project));\n      dispatch(allProjects.actions.setProjectUploadSuccess(true));\n      dispatch(allProjects.actions.setProjectUploadSuccess(false));\n    });\n  };\n};\nexport const fetchDelete = id => {\n  return {\n    method: 'DELETE',\n    headers: {\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      id: id\n    })\n  };\n};\nexport const deleteProject = id => {\n  fetch(`http://localhost:8080/delete/${id}`, fetchDelete(id)).then(res => res.json()); // .then (res.json() =>\n  // add loader (false )\n  //reload projects page\n  // );\n}; // setCurrentStep: (store, action) => {\n//   if (store.currentStep) {\n//     store.history = [...store.history, action.payload];\n//   }\n//   store.currentStep = action.payload;\n// }","map":{"version":3,"sources":["/Users/mm/Development/technigo/final-project/final-project/frontend/src/reducers/allProjects.js"],"names":["createSlice","allProjects","name","initialState","projectList","projectUploadSuccess","reducers","addProject","store","action","payload","setProjectList","setProjectUploadSuccess","fetchProjects","filters","stack","bootcamp","week","queryParams","dispatch","fetch","URLSearchParams","then","res","json","actions","uploadProject","formData","getState","method","body","project","fetchDelete","id","headers","JSON","stringify","deleteProject"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n// import { API_URL } from 'reusable/urls';\n\nexport const allProjects = createSlice({\n  name: 'allProjects',\n  initialState: {\n    projectList: [],\n    projectUploadSuccess: false,\n  },\n  reducers: {\n    addProject: (store, action) => {\n      store.projectList = [...store.projectList, action.payload];\n    },\n    setProjectList: (store, action) => {\n      store.projectList = action.payload;\n    },\n    setProjectUploadSuccess: (store, action) => {\n      store.projectUploadSuccess = action.payload;\n    }\n  },\n});\n\nexport const fetchProjects = (filters = {}) => {\n  const { stack, bootcamp, week } = filters;\n  const queryParams = {};\n  if (stack) {\n    queryParams.stack = stack;\n  }\n\n  if (bootcamp) {\n    queryParams.bootcamp = bootcamp;\n  }\n\n  if (week) {\n    queryParams.week = week;\n  }\n\n  return (dispatch) => {\n    fetch('http://localhost:8080/projects?' + new URLSearchParams(queryParams))\n      .then((res) => res.json())\n      .then((projectList) => {\n        dispatch(allProjects.actions.setProjectList(projectList));\n      });\n  };\n};\n\nexport const uploadProject = (formData) => {\n  return (dispatch, getState) => {\n    fetch('http://localhost:8080/upload', {\n      method: 'POST',\n      body: formData,\n    })\n      .then((res) => res.json())\n      .then((project) => {\n        dispatch(allProjects.actions.addProject(project));\n        dispatch(allProjects.actions.setProjectUploadSuccess(true));\n        dispatch(allProjects.actions.setProjectUploadSuccess(false));\n      });\n  };\n};\n\nexport const fetchDelete = (id) => {\n  return {\n    method: 'DELETE',\n    headers: { 'Content-type': 'application/json' },\n    body: JSON.stringify({ id: id }),\n  };\n};\n\nexport const deleteProject = (id) => {\n  fetch(`http://localhost:8080/delete/${id}`, fetchDelete(id)).then((res) =>\n    res.json()\n  );\n  // .then (res.json() =>\n  // add loader (false )\n  //reload projects page\n  // );\n};\n\n// setCurrentStep: (store, action) => {\n//   if (store.currentStep) {\n//     store.history = [...store.history, action.payload];\n//   }\n//   store.currentStep = action.payload;\n// }\n"]},"metadata":{},"sourceType":"module"}